{"version":3,"sources":["logo.svg","Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","concat","isBold","value","onClick","Board","i","this","boldSquares","key","squares","boards","rows","j","push","renderSquare","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","move","stepNumber","xIsNext","sortAsc","slice","setState","step","status","current","winner","sortStr","moves","map","desc","parseInt","jumpTo","reverse","forEach","cell","index","handleClick","handleSort","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5de756cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={\"square \".concat((props.isBold)? ((props.value == 'X')? ' x-color': ' o-color') : '')} \r\n            onClick={() => props.onClick()}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React, { Component } from 'react'\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n    renderSquare(i){\r\n        const isBold = (this.props.boldSquares[i])? true : false;\r\n        return <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)} isBold={isBold}/>\r\n    }\r\n\r\n    render() {\r\n        const boards = [];\r\n        for (let i = 0; i < 3; i++){\r\n            const rows = [];\r\n            for (let j = 0; j < 3; j++){\r\n                rows.push(\r\n                    this.renderSquare(i * 3 + j)\r\n                )\r\n            }\r\n            boards.push(\r\n                <div key={i} className=\"board-row\">\r\n                       {rows}     \r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                {boards}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board\r\n","import React, { Component } from 'react'\r\nimport Board from './Board'\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null),\r\n                    move: null\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            sortAsc: true\r\n        }\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = (this.state.xIsNext)? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                move: i\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        })\r\n    }\r\n\r\n    handleSort(){\r\n        this.setState({\r\n            sortAsc: !this.state.sortAsc\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const boldSquares = {};\r\n        const sortStr = (!this.state.sortAsc)? 'Sort Ascending' : 'Sort Descending';\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move? 'Go to move #' + move  + ` ->   At: (Row: ${parseInt(step.move /3 + 1)}, Column: ${parseInt(step.move % 3 + 1)})` \r\n                            + `, Player: ${(move % 2 != 0)? 'X' : 'O'}`\r\n                        : 'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        if (!this.state.sortAsc){\r\n            moves.reverse();\r\n        }\r\n\r\n        let status;\r\n        if (winner){\r\n            winner.forEach((cell, index) => {\r\n                boldSquares[cell] = true;\r\n            })\r\n            status = 'Winner: ' + current.squares[winner[0]];\r\n        } else {\r\n            // Bold last move\r\n            if (current.move != null){\r\n                boldSquares[current.move] = true;\r\n            }\r\n            // Draw\r\n            if (this.state.stepNumber == 9){\r\n                status = 'Draw';\r\n            } else {\r\n                status = 'Next player: ' + ((this.state.xIsNext)? 'X' : 'O');\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <div className=\"status\">\r\n                        {status}\r\n                    </div>\r\n                    <Board \r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        boldSquares={boldSquares}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    \r\n                </div>\r\n\r\n                <div className=\"sortWrapper\">\r\n                    <h3>Sort</h3>\r\n                    <button onClick={() => this.handleSort()}>{sortStr}</button>\r\n                </div>\r\n\r\n                <div className=\"moveHistory\">\r\n                    <h3>History</h3>\r\n                    <ol>\r\n                        {moves}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction compareAsc( a, b ) {\r\n    return a - b;\r\n}\r\n\r\nfunction compareDesc( a, b ) {\r\n    return b - a;\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}